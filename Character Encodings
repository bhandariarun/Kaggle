{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6c7ecd24",
   "metadata": {
    "papermill": {
     "duration": 0.005527,
     "end_time": "2024-05-26T06:11:31.054484",
     "exception": false,
     "start_time": "2024-05-26T06:11:31.048957",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Data Cleaning](https://www.kaggle.com/learn/data-cleaning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/character-encodings).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ad213ca",
   "metadata": {
    "papermill": {
     "duration": 0.004333,
     "end_time": "2024-05-26T06:11:31.063804",
     "exception": false,
     "start_time": "2024-05-26T06:11:31.059471",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this exercise, you'll apply what you learned in the **Character encodings** tutorial.\n",
    "\n",
    "# Setup\n",
    "\n",
    "The questions below will give you feedback on your work. Run the following cell to set up the feedback system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71aa73b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:31.075003Z",
     "iopub.status.busy": "2024-05-26T06:11:31.074565Z",
     "iopub.status.idle": "2024-05-26T06:11:32.042953Z",
     "shell.execute_reply": "2024-05-26T06:11:32.041931Z"
    },
    "papermill": {
     "duration": 0.977716,
     "end_time": "2024-05-26T06:11:32.046192",
     "exception": false,
     "start_time": "2024-05-26T06:11:31.068476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.data_cleaning.ex4 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6884457d",
   "metadata": {
    "papermill": {
     "duration": 0.004616,
     "end_time": "2024-05-26T06:11:32.055999",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.051383",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get our environment set up\n",
    "\n",
    "The first thing we'll need to do is load in the libraries we'll be using."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "273e92bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.066944Z",
     "iopub.status.busy": "2024-05-26T06:11:32.066553Z",
     "iopub.status.idle": "2024-05-26T06:11:32.071731Z",
     "shell.execute_reply": "2024-05-26T06:11:32.070656Z"
    },
    "papermill": {
     "duration": 0.013293,
     "end_time": "2024-05-26T06:11:32.073823",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.060530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# modules we'll use\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# helpful character encoding module\n",
    "import charset_normalizer\n",
    "\n",
    "# set seed for reproducibility\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e28d88e0",
   "metadata": {
    "papermill": {
     "duration": 0.00436,
     "end_time": "2024-05-26T06:11:32.082887",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.078527",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) What are encodings?\n",
    "\n",
    "You're working with a dataset composed of bytes.  Run the code cell below to print a sample entry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "379a17da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.093701Z",
     "iopub.status.busy": "2024-05-26T06:11:32.093340Z",
     "iopub.status.idle": "2024-05-26T06:11:32.098463Z",
     "shell.execute_reply": "2024-05-26T06:11:32.097400Z"
    },
    "papermill": {
     "duration": 0.01378,
     "end_time": "2024-05-26T06:11:32.101206",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.087426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'\\xa7A\\xa6n'\n",
      "data type: <class 'bytes'>\n"
     ]
    }
   ],
   "source": [
    "sample_entry = b'\\xa7A\\xa6n'\n",
    "print(sample_entry)\n",
    "print('data type:', type(sample_entry))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094291df",
   "metadata": {
    "papermill": {
     "duration": 0.004309,
     "end_time": "2024-05-26T06:11:32.110164",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.105855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You notice that it doesn't use the standard UTF-8 encoding. \n",
    "\n",
    "Use the next code cell to create a variable `new_entry` that changes the encoding from `\"big5-tw\"` to `\"utf-8\"`.  `new_entry` should have the bytes datatype."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff550837",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.121273Z",
     "iopub.status.busy": "2024-05-26T06:11:32.120660Z",
     "iopub.status.idle": "2024-05-26T06:11:32.130079Z",
     "shell.execute_reply": "2024-05-26T06:11:32.129009Z"
    },
    "papermill": {
     "duration": 0.01758,
     "end_time": "2024-05-26T06:11:32.132300",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.114720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_EncodingsIntro\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "new_entry = sample_entry.decode(\"big5-tw\")\n",
    "new_entry = new_entry.encode()\n",
    "\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "819b3996",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.143878Z",
     "iopub.status.busy": "2024-05-26T06:11:32.143465Z",
     "iopub.status.idle": "2024-05-26T06:11:32.151705Z",
     "shell.execute_reply": "2024-05-26T06:11:32.150631Z"
    },
    "papermill": {
     "duration": 0.016651,
     "end_time": "2024-05-26T06:11:32.153817",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.137166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 1, \"questionId\": \"1_EncodingsIntro\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc99\">Solution:</span> \n",
       "```python\n",
       "before = sample_entry.decode(\"big5-tw\")\n",
       "new_entry = before.encode()\n",
       "\n",
       "```"
      ],
      "text/plain": [
       "Solution: \n",
       "```python\n",
       "before = sample_entry.decode(\"big5-tw\")\n",
       "new_entry = before.encode()\n",
       "\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q1.hint()\n",
    "q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6532787d",
   "metadata": {
    "papermill": {
     "duration": 0.004823,
     "end_time": "2024-05-26T06:11:32.163925",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.159102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Reading in files with encoding problems\n",
    "\n",
    "Use the code cell below to read in this file at path `\"../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv\"`.  \n",
    "\n",
    "Figure out what the correct encoding should be and read in the file to a DataFrame `police_killings`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "986a73d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.177094Z",
     "iopub.status.busy": "2024-05-26T06:11:32.176095Z",
     "iopub.status.idle": "2024-05-26T06:11:32.202046Z",
     "shell.execute_reply": "2024-05-26T06:11:32.200838Z"
    },
    "papermill": {
     "duration": 0.035449,
     "end_time": "2024-05-26T06:11:32.204374",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.168925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_ReadIn\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Load in the DataFrame correctly.\n",
    "police_killings = pd.read_csv('../input/fatal-police-shootings-in-the-us/PoliceKillingsUS.csv',encoding='Windows-1252')\n",
    "\n",
    "# Check your answer\n",
    "q2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "419220f2",
   "metadata": {
    "papermill": {
     "duration": 0.005211,
     "end_time": "2024-05-26T06:11:32.215099",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.209888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Feel free to use any additional code cells for supplemental work.  To get credit for finishing this question, you'll need to run `q2.check()` and get a result of **Correct**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e608de8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.227658Z",
     "iopub.status.busy": "2024-05-26T06:11:32.227264Z",
     "iopub.status.idle": "2024-05-26T06:11:32.232373Z",
     "shell.execute_reply": "2024-05-26T06:11:32.231102Z"
    },
    "papermill": {
     "duration": 0.014124,
     "end_time": "2024-05-26T06:11:32.234681",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.220557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# (Optional) Use this code cell for any additional work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "96007430",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.247861Z",
     "iopub.status.busy": "2024-05-26T06:11:32.247506Z",
     "iopub.status.idle": "2024-05-26T06:11:32.251852Z",
     "shell.execute_reply": "2024-05-26T06:11:32.250669Z"
    },
    "papermill": {
     "duration": 0.013882,
     "end_time": "2024-05-26T06:11:32.254281",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.240399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q2.hint()\n",
    "#q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ed7a7ea",
   "metadata": {
    "papermill": {
     "duration": 0.005267,
     "end_time": "2024-05-26T06:11:32.265221",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.259954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Saving your files with UTF-8 encoding\n",
    "\n",
    "Save a version of the police killings dataset to CSV with UTF-8 encoding.  Your answer will be marked correct after saving this file.  \n",
    "\n",
    "Note: When using the `to_csv()` method, supply only the name of the file (e.g., `\"my_file.csv\"`).  This saves the file at the filepath `\"/kaggle/working/my_file.csv\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7b985441",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.277822Z",
     "iopub.status.busy": "2024-05-26T06:11:32.277430Z",
     "iopub.status.idle": "2024-05-26T06:11:32.319476Z",
     "shell.execute_reply": "2024-05-26T06:11:32.317838Z"
    },
    "papermill": {
     "duration": 0.05143,
     "end_time": "2024-05-26T06:11:32.322032",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.270602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_SaveCSV\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Save the police killings dataset to CSV\n",
    "police_killings.to_csv(\"my_file.csv\")\n",
    "\n",
    "# Check your answer\n",
    "q3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8f6395d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-26T06:11:32.335155Z",
     "iopub.status.busy": "2024-05-26T06:11:32.334797Z",
     "iopub.status.idle": "2024-05-26T06:11:32.338543Z",
     "shell.execute_reply": "2024-05-26T06:11:32.337815Z"
    },
    "papermill": {
     "duration": 0.012605,
     "end_time": "2024-05-26T06:11:32.340533",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.327928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q3.hint()\n",
    "#q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e0a3422",
   "metadata": {
    "papermill": {
     "duration": 0.005771,
     "end_time": "2024-05-26T06:11:32.352277",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.346506",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# (Optional) More practice\n",
    "\n",
    "Check out [this dataset of files in different character encodings](https://www.kaggle.com/rtatman/character-encoding-examples). Can you read in all the files with their original encodings and them save them out as UTF-8 files?\n",
    "\n",
    "If you have a file that's in UTF-8 but has just a couple of weird-looking characters in it, you can try out the [ftfy module](https://ftfy.readthedocs.io/en/latest/#) and see if it helps. \n",
    "\n",
    "# Keep going\n",
    "\n",
    "In the final lesson, learn how to [**clean up inconsistent text entries**](https://www.kaggle.com/alexisbcook/inconsistent-data-entry) in your dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bc53531",
   "metadata": {
    "papermill": {
     "duration": 0.005474,
     "end_time": "2024-05-26T06:11:32.363477",
     "exception": false,
     "start_time": "2024-05-26T06:11:32.358003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/data-cleaning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2647,
     "sourceId": 4395,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.555576,
   "end_time": "2024-05-26T06:11:32.788627",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-26T06:11:28.233051",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
